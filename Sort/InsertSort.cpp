//对一个长度为n的int数组进行插入排序
void InsertSort(int A[], int n)
{
    int i, j, temp;
    for (int i = 1; i < n; i++) //从i=1开始，将数组读各元素插入已经排好序的序列中
    {
        if (A[i] < A[i - 1]) // A[i]关键字小于前驱
        {
            temp = A[i];                                // temp暂存A[i]
            for (j = i - 1; j >= 0 && A[j] > temp; j--) //检查i前面已经排好序的元素
                A[j + 1] = A[j];                        //所有大于temp的元素都向后挪位
            A[j + 1] = temp;                            //将temp复制到插入位置
        }
    }
}

//法二：（带哨兵，数组下标为0的位置存放哨兵，数据存放在下标为1到n的地方，数组大小为n+1）可以每次少比较j>=0
void InsertSortGuard(int A[], int n)
{
    int i, j;
    for (i = 2; i <= n; i++) //依次将A[2]~A[n]插入到前面已排序序列
    {
        if (A[i] < A[i - 1]) //若A[i]关键码小于其前驱，将A[i]插入有序表
        {
            A[0] = A[i];                      //复制为哨兵存放在A[0]
            for (j = i - 1; A[0] < A[j]; --j) // 从后往前检查所有前面已排好序的元素，所有大于哨兵的元素都要依次往后挪一位
            {
                A[j + 1] = A[j]; //向后挪位
            }
            A[j + 1] = A[0]; //复制到插入位置
        }
    }
}